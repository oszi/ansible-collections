---
# Assume established connections and default SSH are accepted by default
# and ansible is reusing SSH connections thus these tasks are non-destructive
# whether SSHD is running on an alternate port already or not.

- name: Ensure conflicting firewalls are not installed
  ansible.builtin.package:
    name:
      # Fedora/EL
      - "iptables-services"
      # Debian/Ubuntu
      - "iptables-persistent"
      - "ufw"
    state: "absent"
  notify: "Restart firewalld"
  tags: [package]

- name: Install firewalld daemon
  ansible.builtin.package:
    name: "firewalld"
    state: "present"
  notify: "Restart firewalld"
  tags: [package]

- name: Set firewall backend to {{ firewalld_backend }}
  ansible.builtin.lineinfile:
    dest: "/etc/firewalld/firewalld.conf"
    line: "FirewallBackend={{ firewalld_backend }}"
    regexp: '^#?\s*FirewallBackend='
    state: "present"
  notify: "Restart firewalld"

- name: Run handlers immediately
  ansible.builtin.meta: flush_handlers

- name: Ensure firewalld is started
  ansible.builtin.systemd:
    name: "firewalld"
    state: "started"
    enabled: true

- name: Enable alternate SSH port in the default zone
  when: "ansible_port | default(22) | int != 22"
  ansible.posix.firewalld:
    port: "{{ ansible_port }}/tcp"
    state: "enabled"
    permanent: true
    immediate: true
  tags: [ssh]

- name: Configure pre-defined firewalld zones
  with_items: "{{ firewalld_zones }}"
  ansible.posix.firewalld:
    interface: "{{ item.interface | default(omit) }}"
    source: "{{ item.source | default(omit) }}"
    masquerade: "{{ item.masquerade | default(omit) }}"
    zone: "{{ item.zone | default(omit) }}"
    state: "{{ item.state | default('enabled') }}"
    permanent: "{{ firewalld_permanent }}"
    immediate: true

- name: Enable pre-defined rich rules in firewalld
  with_items: "{{ firewalld_rich_rules }}"
  ansible.posix.firewalld:
    rich_rule: "{{ item is mapping | ternary(item.rule, item) }}"
    zone: "{{ item.zone | default(omit) }}"
    state: "{{ item.state | default('enabled') }}"
    permanent: "{{ firewalld_permanent }}"
    immediate: true

- name: Enable pre-defined services in firewalld
  with_items: "{{ firewalld_services }}"
  ansible.posix.firewalld:
    service: "{{ item is mapping | ternary(item.service, item) }}"
    zone: "{{ item.zone | default(omit) }}"
    state: "{{ item.state | default('enabled') }}"
    permanent: "{{ firewalld_permanent }}"
    immediate: true

- name: Enable pre-defined ports in firewalld
  with_items: "{{ firewalld_ports }}"
  ansible.posix.firewalld:
    port: "{{ item is mapping | ternary(item.port, item) }}"
    zone: "{{ item.zone | default(omit) }}"
    state: "{{ item.state | default('enabled') }}"
    permanent: "{{ firewalld_permanent }}"
    immediate: true

- name: Set up pre-defined direct rules in firewalld
  with_items: "{{ firewalld_direct_rules }}"
  ansible.builtin.shell: |-
    set -euo pipefail
    /usr/bin/firewall-cmd --direct --add-rule {{ item }}
    {% if firewalld_permanent %}
    /usr/bin/firewall-cmd --permanent --direct --add-rule {{ item }}
    {% endif %}
  args:
    executable: "/bin/bash"
  register: _shell_result
  changed_when: "'ALREADY_ENABLED' not in _shell_result.stderr"
