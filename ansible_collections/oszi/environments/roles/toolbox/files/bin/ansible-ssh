#!/usr/bin/env python3
# pylint: disable=invalid-name,line-too-long,missing-class-docstring,missing-function-docstring,missing-module-docstring
# black -l 120 --target-version=py311 ansible-ssh
import dataclasses as dcls
import io
import os
import shlex
import signal
import subprocess as sp
import sys
import textwrap

from argparse import ArgumentParser, RawTextHelpFormatter
from typing import List, Mapping, Optional

from ansible.parsing.utils.yaml import from_yaml


args_parser = ArgumentParser(
    usage="ansible-ssh [--help] [-i INVENTORY] [...] [host [command ...]]",
    description="SSH into a host in an ansible inventory with all configured arguments.",
    epilog=(
        "ANSIBLE environment variables and ansible.cfg are interpreted too.\n"
        "Port forwarding: ansible-ssh -N -f -L 8080:localhost:80 HOST\n"
        "Transfer files: tar -czf- * | ansible-ssh -T HOST dd of=tar.gz"
    ),
    formatter_class=RawTextHelpFormatter,
)

_args_bool = {"action": "store_true", "default": False}
# Ansible args ...
args_parser.add_argument("--inventory", "-i", dest="inventory")
args_parser.add_argument("--vault-id", dest="vault_id", help="example@ansible-vault-id-client")
args_parser.add_argument("--vault-password-file", dest="vault_password_file")
args_parser.add_argument("--ask-vault-password", dest="ask_vault_password", **_args_bool)
# Conflicting args ...
args_parser.add_argument("--private-key", "--key-file", dest="key_file")
args_parser.add_argument("--user", "-u", dest="user", help="override the user (ansible_user)\n\n")
# SSH args ...
args_parser.add_argument("-F", dest="ssh_config", help="ssh config file")
args_parser.add_argument("-o", dest="ssh_options", help="ssh options (accepts multiple)", action="append")
args_parser.add_argument("-A", dest="forward_agent", help="enable agent forwarding", **_args_bool)
# Prepend app args jump hosts to ansible-configured ones ...
args_parser.add_argument("-J", dest="jump_host", help="comma-separated jump hosts")
args_parser.add_argument("-L", dest="local_forward", help="[bind_address:]port:host:host_port")
args_parser.add_argument("-R", dest="remote_forward", help="remote_socket:local_socket")
args_parser.add_argument("-W", dest="stdio_forward", help="forward stdin/stdout to host:port")
args_parser.add_argument("-N", dest="no_command", help="do not execute a command", **_args_bool)
# SSH forking itself allows ansible-ssh to exit cleanly unlike with -n and & ...
args_parser.add_argument("-f", dest="background", help="detach to background", **_args_bool)
args_parser.add_argument("-T", dest="no_pty", help="disable pty allocation", **_args_bool)
args_parser.add_argument("-t", dest="pty", help="force pty allocation", **_args_bool)
args_parser.add_argument("-v", dest="verbose", help="verbose mode 3", **_args_bool)
# Positional args ...
args_parser.add_argument("host", help="host to ssh into / leave empty for fzf", nargs="?")
args_parser.add_argument("command", help="command [argument ...]", nargs="...")


@dcls.dataclass
class AnsibleSSHArgs:
    SSH = ["ssh"]

    # From ansible config and this app, prepended.
    ssh_args: List[str] = dcls.field(default_factory=list)

    # From ansible config and inventory, superseded.
    ssh_common_args: List[str] = dcls.field(default_factory=list)
    ssh_extra_args: List[str] = dcls.field(default_factory=list)

    # From ansible config, inventory and this app, superseded.
    user: Optional[str] = dcls.field(default=None)
    key_file: Optional[str] = dcls.field(default=None)
    host: Optional[str] = dcls.field(default=None)

    def __add__(self, other):
        assert isinstance(other, AnsibleSSHArgs)
        return AnsibleSSHArgs(
            ssh_args=other.ssh_args + self.ssh_args,
            ssh_common_args=other.ssh_common_args or self.ssh_common_args,
            ssh_extra_args=other.ssh_extra_args or self.ssh_extra_args,
            user=other.user or self.user,
            key_file=other.key_file or self.key_file,
            host=self.host or other.host,  # reverse priority
        )

    def get_args(self, command: Optional[List[str]] = None) -> List[str]:
        ssh_args = self.SSH + self.ssh_args + self.ssh_common_args + self.ssh_extra_args

        jump_hosts = []
        while "-J" in ssh_args:
            j = ssh_args.index("-J")
            jump_hosts.append(ssh_args.pop(j + 1))
            ssh_args.pop(j)

        if jump_hosts:
            ssh_args += ["-J", ",".join(jump_hosts)]
        if self.user:
            ssh_args += ["-l", self.user]
        if self.key_file:
            ssh_args += ["-i", self.key_file]

        ssh_args.append(self.host)
        if command:
            ssh_args.append("--")
            # SSH executes commands in a shell and joins arguments by spaces.
            # Double quote command args to preserve ansible-ssh args.
            ssh_args.extend(map(shlex.quote, command))

        return ssh_args


def ansible_skip_first_lines(line: str) -> bool:
    line = line.strip()
    return (
        line.startswith("[WARNING]")
        or line.endswith("ansible.cfg as config file")  # the first line everywhere
        or (line.startswith("hosts (") and line.endswith("):"))  # ansible all --list-hosts
    )


def ansible_command(args: List[str], env: Mapping[str, str] = None) -> str:
    with sp.Popen(args, env=env, stdout=sp.PIPE, stderr=sp.PIPE) as proc, io.StringIO() as output:
        try:
            skipped = False
            for line in io.TextIOWrapper(proc.stdout, encoding="utf-8"):
                if skipped or not ansible_skip_first_lines(line):
                    output.write(line)
                    skipped = True

            proc.wait()
        except KeyboardInterrupt:
            proc.terminate()

        if proc.returncode != 0:
            if proc.stderr:
                print(proc.stderr.read().decode("utf-8"), file=sys.stderr)
            sys.exit(proc.returncode)

        return output.getvalue()


def ansible_list_hosts(inventory: Optional[str]) -> str:
    cmd = ["ansible", "all", "--list-hosts"]
    if inventory:
        cmd += ["-i", inventory]

    env = os.environ.copy()
    env.update(dict.fromkeys(("ANSIBLE_ASK_VAULT_PASS", "ANSIBLE_ASK_PASS", "ANSIBLE_BECOME_ASK_PASS"), "False"))

    # Skip vault scripts as nothing is actually decrypted by --list-hosts.
    if not env.get("ANSIBLE_VAULT_PASSWORD_FILE") and os.path.isfile("/etc/hostname"):
        env["ANSIBLE_VAULT_PASSWORD_FILE"] = "/etc/hostname"
        env["ANSIBLE_VAULT_IDENTITY_LIST"] = ""

    return textwrap.dedent(ansible_command(cmd, env)).rstrip()


def get_config_ssh_settings() -> List[Mapping[str, Optional[str]]]:
    cmd = ["ansible-config", "dump", "-t", "connection", "--format", "yaml"]
    ansible_config = from_yaml(ansible_command(cmd))

    for connection_plugin in ansible_config:
        for plugin_key, plugin_values in connection_plugin.items():
            if plugin_key == "ssh":
                return plugin_values
    return []


def get_config_ssh_args() -> AnsibleSSHArgs:
    ssh_args = AnsibleSSHArgs()
    for item in get_config_ssh_settings():
        if item["value"]:
            if item["name"] in ("ssh_args", "ssh_common_args", "ssh_extra_args"):
                setattr(ssh_args, item["name"], shlex.split(item["value"]))
            elif item["name"] == "remote_user":
                ssh_args.user = item["value"]
            elif item["name"] == "private_key_file":
                ssh_args.key_file = item["value"]

    return ssh_args


def get_inventory_ssh_args(app_args) -> AnsibleSSHArgs:
    cmd = ["ansible-inventory", "--yaml", "--host", app_args.host]
    ansible_args = []
    if app_args.inventory:
        ansible_args += ["-i", app_args.inventory]
    if app_args.vault_id:
        ansible_args += ["--vault-id", app_args.vault_id]
    if app_args.vault_password_file:
        ansible_args += ["--vault-password-file", app_args.vault_password_file]
    if app_args.ask_vault_password:
        ansible_args += ["--ask-vault-password"]

    cmd.extend(ansible_args)
    hostvars = from_yaml(ansible_command(cmd))

    def get_hostvar(variable: str) -> str:
        if not isinstance(hostvars[variable], str) or "{{" not in hostvars[variable]:
            return str(hostvars[variable])

        # A workaround for variables that are not interpolated by ansible-inventory itself.
        # The debug module runs locally, no SSH connection will be established.
        cmd = ["ansible", app_args.host, "--one-line", "-m", "ansible.builtin.debug", "-a", "var=" + variable]
        cmd.extend(ansible_args)

        output = ansible_command(cmd)
        result_start = output.find("=> {") + 3
        result_end = output.rfind("}") + 1
        assert 0 + 3 < result_start < result_end  # ansible_command should have failed if this is false.
        result = from_yaml(output[result_start:result_end], json_only=True)
        return result[variable]

    ssh_args = AnsibleSSHArgs()
    if "ansible_ssh_common_args" in hostvars:
        ssh_args.ssh_common_args = shlex.split(get_hostvar("ansible_ssh_common_args"))
    if "ansible_ssh_extra_args" in hostvars:
        ssh_args.ssh_extra_args = shlex.split(get_hostvar("ansible_ssh_extra_args"))
    if "ansible_port" in hostvars:
        ssh_args.ssh_args += ["-p", get_hostvar("ansible_port")]

    if "ansible_user" in hostvars:
        ssh_args.user = get_hostvar("ansible_user")
    if "ansible_ssh_private_key_file" in hostvars:
        ssh_args.key_file = get_hostvar("ansible_ssh_private_key_file")
    if "ansible_host" in hostvars:
        ssh_args.host = get_hostvar("ansible_host")

    return ssh_args


def get_app_ssh_args(app_args) -> AnsibleSSHArgs:  # pylint: disable=too-many-branches
    ssh_args = AnsibleSSHArgs(user=app_args.user, key_file=app_args.key_file, host=app_args.host)
    if app_args.ssh_config:
        ssh_args.ssh_args += ["-F", app_args.ssh_config]
    if app_args.ssh_options:
        for option in app_args.ssh_options:
            ssh_args.ssh_args += ["-o", option]

    if app_args.forward_agent:
        ssh_args.ssh_args += ["-A"]
    if app_args.jump_host:
        ssh_args.ssh_args += ["-J", app_args.jump_host]
    if app_args.local_forward:
        ssh_args.ssh_args += ["-L", app_args.local_forward]
    if app_args.remote_forward:
        ssh_args.ssh_args += ["-R", app_args.remote_forward]
    if app_args.stdio_forward:
        ssh_args.ssh_args += ["-W", app_args.stdio_forward]

    if app_args.no_command:
        ssh_args.ssh_args += ["-N"]
    if app_args.background:
        ssh_args.ssh_args += ["-f"]
    if app_args.no_pty:
        ssh_args.ssh_args += ["-T"]
    if app_args.pty:
        ssh_args.ssh_args += ["-t"]
    if app_args.verbose:
        ssh_args.ssh_args += ["-vvv"]

    return ssh_args


def exit_with_usage(error):
    args_parser.print_usage(sys.stderr)
    print(f"ansible-ssh: error: {error}", file=sys.stderr)
    sys.exit(255)


def set_host_with_fzf_or_exit(app_args):
    try:
        sp.check_call(["fzf", "--version"], stdout=sp.DEVNULL, stderr=sp.DEVNULL)
    except Exception:  # pylint: disable=broad-exception-caught
        exit_with_usage("fzf is not installed")

    hosts = ansible_list_hosts(app_args.inventory)
    if not hosts:
        exit_with_usage("no inventory or hosts found")

    try:
        cmd = ["fzf", "--no-multi", "--no-sort", "--tac"]
        app_args.host = sp.check_output(cmd, input=hosts, text=True).rstrip()
        if not app_args.host:
            raise ValueError("no host selected")

    except sp.CalledProcessError as error:
        exit_with_usage(error.stderr or "fzf exited")

    except Exception as error:  # pylint: disable=broad-exception-caught
        exit_with_usage(error)


def main():
    app_args = args_parser.parse_args()
    if app_args.host is None:
        set_host_with_fzf_or_exit(app_args)

    ssh_cmd = (  # increasing priority
        get_config_ssh_args() + get_inventory_ssh_args(app_args) + get_app_ssh_args(app_args)
    ).get_args(app_args.command)

    if app_args.verbose:
        print(f"ssh_cmd = {ssh_cmd}", file=sys.stderr)

    with sp.Popen(ssh_cmd) as ssh_proc:

        def signal_handler(signum, frame):  # pylint: disable=unused-argument
            print(f"ansible-ssh: caught signal: {signum}", file=sys.stderr)
            ssh_proc.send_signal(signum)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        sys.exit(ssh_proc.wait())


if __name__ == "__main__":
    main()
