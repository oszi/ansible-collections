{# Variables:
container_service_vars['image']: container image URL
container_service_vars['runtime_options']: [ list of podman run options ]
container_service_vars['labels']: { dict of labels - e.g. io.containers.autoupdate: registry|local }
container_service_vars['environment']: { dict of env vars - HOST_ prefix is not exposed }
container_service_vars['exec_start_pre']: [ list of commands to execute before starting ]
container_service_vars['exec_start_post']: [ list of commands to execute after starting ]
container_service_vars['command']: optional command string
container_service_vars['unit_options']: [ list of systemd unit options ]
container_service_vars['restart']: systemd restart policy
container_service_vars['restart_sec']: service restart seconds
container_service_vars['timeout_stop_sec']: stop timeout seconds
#}
[Unit]
After=network-online.target
Wants=network-online.target
RequiresMountsFor=%t/containers
{% for item in container_service_vars.unit_options | default([]) | flatten %}
{{ item }}
{% endfor %}

[Service]
{% for key, value in (container_service_vars.environment | default({})).items() %}
Environment={{ (key + '=' + value | string) | quote }}
{% endfor %}
Environment=PODMAN_SYSTEMD_UNIT=%n
Restart={{ container_service_vars.restart | default('on-failure') }}
RestartSec={{ container_service_vars.restart_sec | default(10) }}
TimeoutStopSec={{ container_service_vars.timeout_stop_sec | default(70) }}
{% for item in container_service_vars.exec_start_pre | default([]) | flatten %}
ExecStartPre={{ item }}
{% endfor %}
ExecStart={{ containerhost_runtime }} run \
    --name=%N \
    --replace \
    --detach \
    --cgroups=no-conmon \
{% for item in container_service_vars.runtime_options | default([]) | flatten %}
    {{ item }} \
{% endfor %}
{% for key, value in (containerhost_services_labels | combine(container_service_vars.labels | default({}))).items() %}
    --label={{ (key + '=' + value | string) | quote }} \
{% endfor %}
{% for item in (container_service_vars.environment | default({})).keys() %}
{% if not item.startswith('HOST_') %}
    --env={{ item }} \
{% endif %}
{% endfor %}
    {{ container_service_vars.image
}}{% if 'command' in container_service_vars %} \
    {{ container_service_vars.command | indent(4)
}}{% endif %}

{% for item in container_service_vars.exec_start_post | default([]) | flatten %}
ExecStartPost={{ item }}
{% endfor %}
ExecStop={{ containerhost_runtime }} stop -i %N
Type=forking

[Install]
WantedBy=multi-user.target
