---
- name: "Validate quadlet name {{ podman_quadlet_item.key }}"
  ansible.builtin.assert:
    that: "podman_quadlet_item.key | regex_search('^[\\w.-]+@?\\.\\w+$')"

- name: Set podman quadlet loop vars
  ansible.builtin.set_fact:
    _podman_quadlet_name: "{{ podman_quadlet_item.key.split('.')[:-1] | join('.') }}"
    _podman_quadlet_type: "{{ podman_quadlet_item.key.split('.')[-1] }}"
    _podman_quadlet_path: "{{ podman_quadlet_systemd_path }}/{{ podman_quadlet_item.key }}"
    _podman_quadlet_copy_results: null  # Reset previous iteration.

- name: Copy static files for the quadlet
  when: podman_quadlet_item.key in podman_quadlets_copy_files
  block:
    # Do not set permissions as they could be changed by the service.
    - name: "Ensure directories exist for quadlet {{ podman_quadlet_item.key }}"
      ansible.builtin.file:  # noqa: risky-file-permissions
        path: "{{ item }}"
        state: "directory"
      with_items: "{{ podman_quadlets_copy_files[podman_quadlet_item.key]
        | map(attribute='dest') | map('dirname') | unique }}"

    - name: "Copy static files for quadlet {{ podman_quadlet_item.key }}"
      ansible.builtin.copy:
        dest: "{{ item.dest }}"
        content: "{{ item.content | default(omit) }}"
        src: "{{ item.src | default(omit) }}"
        owner: "{{ item.owner | default(omit) }}"
        group: "{{ item.group | default(item.owner | default(omit)) }}"
        mode: "{{ item.mode | default(omit) }}"
      with_items: "{{ podman_quadlets_copy_files[podman_quadlet_item.key] }}"
      register: _podman_quadlet_copy_results

- name: "Run init script for quadlet {{ podman_quadlet_item.key }}"
  when: podman_quadlet_item.key in podman_quadlets_init_scripts
  ansible.builtin.shell: |
    set -euxo pipefail
    {{ podman_quadlets_init_scripts[podman_quadlet_item.key] }}
  args:
    # White lie to only execute once before installing.
    creates: "{{ _podman_quadlet_path }}"
    executable: "/bin/bash"

- name: "Install quadlet {{ podman_quadlet_item.key }}"
  ansible.builtin.copy:
    content: "{{ podman_quadlet_item.value }}"
    dest: "{{ _podman_quadlet_path }}"
    owner: "root"
    group: "root"
    mode: "0644"
  register: _podman_quadlet_unit_result

- name: Find potential quadlet errors
  when: _podman_quadlet_unit_result.changed
  ansible.builtin.command: "{{ podman_system_generator_path }} --dryrun"
  changed_when: false
  check_mode: false

- name: "Reload systemd for quadlet {{ podman_quadlet_item.key }}"
  when: _podman_quadlet_unit_result.changed  # Whether it is a template or not.
  ansible.builtin.systemd:
    daemon_reload: true

- name: "Enable or restart quadlet {{ podman_quadlet_item.key }}"
  when: "'@' not in _podman_quadlet_name"
  ansible.builtin.systemd:
    name: "{{ _podman_quadlet_service }}"
    state: "{{ 'restarted' if _podman_quadlet_changed else 'started' }}"
    enabled: true
  vars:
    _podman_quadlet_service: "{{ _podman_quadlet_name }}{% if _podman_quadlet_type not in ['container', 'kube']
      %}-{{ _podman_quadlet_type }}{% endif %}.service"
    _podman_quadlet_changed: "{{ _podman_quadlet_unit_result.changed
      or _podman_quadlet_copy_results is not none and _podman_quadlet_copy_results.changed }}"
