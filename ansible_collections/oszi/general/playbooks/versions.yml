---
- name: Print ansible and distribution versions
  hosts: all
  # become: undef
  gather_facts: false
  strategy: ansible.builtin.linear
  vars:
    common_collections:
      - amazon.aws
      - ansible.netcommon
      - ansible.posix
      - ansible.utils
      - community.crypto
      - community.dns
      - community.general
      - community.libvirt
      - containers.podman
      - google.cloud
      - oszi.environments
      - oszi.general
      - oszi.thirdparty

  tasks:
    - name: Print ansible version
      run_once: true  # noqa: run-once[task]
      ansible.builtin.debug:
        msg:
          ansible_config_file: "{{ ansible_config_file }}"
          ansible_version: "{{ ansible_version.full }}"
      tags: [ansible]

    - name: Print collection versions
      run_once: true  # noqa: run-once[task]
      ansible.builtin.debug:
        msg: "{{ dict(common_collections | zip(lookup('community.general.collection_version', *common_collections,
          result_no_version='*', result_not_found='-').split(','))) }}"  # use strings!
      tags: [ansible]

    - name: Deferred setup to gather facts
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - "distribution"
          - "distribution_version"
          - "kernel"
          - "python"
          - "python_version"
      tags: [facts]

    - name: Print python facts
      ansible.builtin.debug:
        msg:
          python_executable: "{{ ansible_facts.python.executable }}"
          python_version: "{{ ansible_facts.python_version }}"
      tags: [facts]

    - name: Print distribution facts
      ansible.builtin.debug:
        msg:
          distribution: "{{ ansible_facts.distribution }} {{ ansible_facts.distribution_version }}"
          kernel: "{{ ansible_facts.kernel }} {{ ansible_facts.kernel_version }}"
      tags: [facts]

    - name: Gather container system versions
      ansible.builtin.shell: |
        {% raw %}
        set -o pipefail
        if command -v podman >/dev/null 2>&1; then
          echo -n "Podman Version: "
          podman version -f '{{.Client.Version}}' || echo "error"
        fi

        if command -v docker >/dev/null 2>&1; then
          if ! docker -v | grep -iq podman; then
            echo -n "Docker Client Version: "
            docker version -f '{{.Client.Version}}' || echo "error"
            echo -n "Docker Server Version: "
            docker version -f '{{.Server.Version}}' || echo "error"
          else
            echo "Docker Version: podman-docker"
          fi
        fi

        if command -v kubectl >/dev/null 2>&1; then
          echo -n "Kubernetes "
          kubectl version || true
        fi
        {% endraw %}
      args:
        executable: "/bin/bash"
      changed_when: false
      check_mode: false
      no_log: true
      register: _container_system_versions
      tags: [containers]

    - name: Print container system versions
      when: "_container_system_versions.stdout_lines | length > 0"
      ansible.builtin.debug:
        msg: "{{ _container_system_versions.stdout_lines }}"
      tags: [containers]
